//--------------------------------
//---------- Base code ---23/02/20
//--------------------------------

//---estimer les dégats
//---rester cacher jusqu'à pouvoir tirer en ligne :
//1- créer une liste de tout les id de cellules accessibles getcellY getcellX
//2- tester le ocntenu de chaque cellule
//3- tester si dans le champ de vision ennemy et ou à portée de move
//4-tester si ennemi approche et eviter les tirs des armes équippées

//tester si pas de dégat
//Dégâts de l'attaque = (Dégâts de base) × (1 + Force / 100)
//Dégâts finaux = (Dégâts de base) * (1 - Bouclier relatif / 100) - Bouclier absolu
global count_sword;
global ven_number;
global me = getLeek();
global enemy = detect_enemy();

function detect_enemy() { //si pas d'autres cible qu'un non leek alors tirer, à faire garder l'id choisit jusqu'à la mort
	var target = getNearestEnemy();
	var enemies = getEnemies();
	var type_en;
	//debug("enemies" + enemies);
	if (getType(target) !== ENTITY_LEEK) {
		for (var i = 0; i < count(enemies); i++) {
			if (getType(enemies[i]) === ENTITY_LEEK and lineOfSight(getCell(me), getCell(enemies[i]))) {
				target = enemies[i];
			}
		}
	}
	return target;
}

function scan_map() { //but recherche les obstacles à faire en début de partie
	var tab = [];
	for (var i = 0; i < 613; i++) {
		push(tab, getCellContent(i));
	}
}

function can_shoot_after_move() {} //vérifie si un tir efficace dispo après avoir bouger 
function check_cell_in_sight() {
	var en_vu = [];
	var j = 0;

	for (var i = 0; i < 613; i++) {

		if (lineOfSight(i, getCell(enemy)) == true) {
			en_vu[j] = i;
			j++;
			//debug("cachette trouvé !");
		}
	}
	return en_vu;
	//debug(j + " cachettes trouvés !");
} //vérifie si la cellule est hors de vue de l'ennemi'
function check_cell_out_of_area() {} //vérifie si la cellule est en vue de l'ennemi mais hors de portée de celui -ci prio 3

function put_bulb() { //on pose les bulbs dans des angles
	var cel_me = getCell(me);
	var cel_x = getCellX(cel_me);
	var cel_y = getCellY(cel_me);
	var x = [1, -1, 1, -1];
	var y = [1, -1, -1, 1];
	var cel_targ = -1;
	var cel_resu = -1;

	for (var i = 0; i <= 3; i++) {
		if (getCellFromXY(cel_x + x[i], cel_y + y[i]) !== null) { //cell existe
			cel_targ = getCellFromXY(cel_x + x[i], cel_y + y[i]);
			if (getCellContent(cel_targ) === CELL_EMPTY) { //cell vide
				cel_resu = cel_targ;
			}

		}
	}
	return cel_resu;

}

function bulbAI2() {
	var summoner = getSummoner();
	//say("Bonjour, moi c'est Fab.");

	if (getLife(summoner) > 0.75 * (getTotalLife(summoner))) {
		if (canUseChip(CHIP_PROTEIN, summoner) and getTP() >= getChipCost(CHIP_PROTEIN) and getCooldown(CHIP_PROTEIN) === 0) {
			useChip(CHIP_PROTEIN, summoner);
		}
	}
	if (canUseChip(CHIP_HELMET, summoner) and getTP() >= getChipCost(CHIP_HELMET) and getCooldown(CHIP_HELMET) === 0) {
		useChip(CHIP_HELMET, summoner);
	}
	if (canUseChip(CHIP_BANDAGE, summoner) and getTP() >= getChipCost(CHIP_BANDAGE) and getCooldown(CHIP_BANDAGE) === 0) {
		useChip(CHIP_BANDAGE, summoner);
	}
	if (canUseChip(CHIP_PEBBLE, enemy) and getTP() >= getChipCost(CHIP_PEBBLE) and getCooldown(CHIP_PEBBLE) === 0) {
		useChip(CHIP_PEBBLE, enemy);
	}
	moveToward(getNearestEnemy());
}

function bulbAI() {
	var summoner = getSummoner();
	//say("Bonjour, moi c'est Fab.");
	if (getTurn() < 20) {
		moveToward(summoner);
	} else {
		moveToward(enemy);
	}
	if (getLife(summoner) > 0.75 * (getTotalLife(summoner))) {
		if (canUseChip(CHIP_PROTEIN, summoner) and getTP() >= getChipCost(CHIP_PROTEIN) and getCooldown(CHIP_PROTEIN) === 0) {
			useChip(CHIP_PROTEIN, summoner);
		}
	}
	if (canUseChip(CHIP_HELMET, summoner) and getTP() >= getChipCost(CHIP_HELMET) and getCooldown(CHIP_HELMET) === 0) {
		useChip(CHIP_HELMET, summoner);
	}
	if (canUseChip(CHIP_BANDAGE, summoner) and getTP() >= getChipCost(CHIP_BANDAGE) and getCooldown(CHIP_BANDAGE) === 0) {
		useChip(CHIP_BANDAGE, summoner);
	}
	if (canUseChip(CHIP_PEBBLE, enemy) and getTP() >= getChipCost(CHIP_PEBBLE) and getCooldown(CHIP_PEBBLE) === 0) {
		useChip(CHIP_PEBBLE, enemy);
	}
}

function start() {
	var check;
	if (getTurn() == 1) {
		if (put_bulb() !== -1)
			check = summon(CHIP_PUNY_BULB, put_bulb(), bulbAI);

		say("have fun " + getName(enemy));
		//debug("best wp:" + getWeaponName(getBestWP(enemy)));
		//debug(" should do :" + GetEstimDam_wp(getBestWP(enemy), enemy));
		//setWeapon(getBestWP(enemy));
		setWeapon(WEAPON_FLAME_THROWER);
		//useChip(CHIP_SHIELD, me);
		count_sword = 0;
	}

}

function GetEstimDam_chip(chip, target) {
	var effects = [null];
	var dam = 0;
	var i = 0;
	var j = 0;
	var min_dam = 0;
	var max_dam = 0;
	var aver_dam = 0,
		aver_heal;
	var dam_finaux = 0,
		heal_finaux = 0;

	effects = getChipEffects(chip);
	//debug("effects" + effects); //[type, min, max, turns, targets, modifiers]

	for (i = 0; i < count(effects); i++) {
		if (effects[i][0] == EFFECT_DAMAGE) {
			min_dam = (effects[i][1]);
			max_dam = (effects[i][2]);
			aver_dam = (min_dam + max_dam) / 2;
			dam = aver_dam * (1 + (getStrength() / 100));
			dam_finaux = dam * (1 - (getRelativeShield(target) / 100)) - getAbsoluteShield(target);
			return (dam_finaux);
		}
		if (effects[i][0] == EFFECT_HEAL) {
			min_dam = (effects[i][1]);
			max_dam = (effects[i][2]);
			aver_heal = (min_dam + max_dam) / 2;
			heal_finaux = aver_heal * (1 + getWisdom() / 100);
			return (heal_finaux);
		}
	}
}

function getBestWP(target) {
	if (GetEstimDam_wp(getWeapons()[1], target) > GetEstimDam_wp(getWeapons()[0], target)) {
		return getWeapons()[1];
	}
	return getWeapons()[0];
}

function GetEstimDam_wp(weapon, target) {
	var effects = [null];
	var dam = 0;
	var i = 0;
	var j = 0;
	var min_dam = 0;
	var max_dam = 0;
	var aver_dam = 0,
		aver_heal;
	var dam_finaux = 0,
		heal_finaux = 0;

	effects = getWeaponEffects(weapon);
	//debug("effects" + effects); //[type, min, max, turns, targets, modifiers]
	//SoinsFinaux = SoinsDeBase * (1 + Sagesse / 100)
	for (i = 0; i < count(effects); i++) {
		if (effects[i][0] == EFFECT_DAMAGE) {
			min_dam = (effects[i][1]);
			max_dam = (effects[i][2]);
			aver_dam = (min_dam + max_dam) / 2;
			dam = aver_dam * (1 + (getStrength() / 100));
			dam_finaux = dam * (1 - (getRelativeShield(target) / 100)) - getAbsoluteShield(target);
			return (dam_finaux);
		}
		if (effects[i][0] == EFFECT_HEAL) {
			min_dam = (effects[i][1]);
			max_dam = (effects[i][2]);
			aver_heal = (min_dam + max_dam) / 2;
			heal_finaux = aver_heal * (1 + getWisdom() / 100);
			return (heal_finaux);
		}
	}
}

function flee(target) {
	var cell_en = getCell(target);
	var cell_me = getCell(me);
	while (lineOfSight(cell_me, cell_en) == true) {
		moveAwayFromLine(cell_en, cell_me);
	}
}

function enemy_in_sight(target) {
	var cell_en = getCell(target);
	var cell_me = getCell(me);
	var resu2 = false;

	resu2 = lineOfSight(cell_me, cell_en); //lineOfSight
	//debug("en vue " + resu2);
	return (resu2);
}

function getlinemove_chip_max_dis(target, chip) { //cherche le point à portée le plsu éloigné de l'ennemi'

	var cell_en = getCell(target);
	var cell_me = getCell(me);
	var cells_in_area = getCellsToUseChipOnCell(chip, cell_en);
	var tmp_distance = [];
	var tmp_ecart = [];

	var min_dis = [],
		max_en_dis = 0,
		i = 0,
		j = 0,
		cell_cible = [],
		cell_max_TO_en = [];

	max_en_dis = getChipMaxRange(chip);

	//debug("celleinarea :" + cells_in_area);
	for (i = 0; i < count(cells_in_area); i++) {
		//tmp_distance[i] = getPathLength(cell_me, cells_in_area[i]);
		//tmp_ecart[i] = getPathLength(cell_en, cells_in_area[i])
		if ((getPathLength(cell_en, cells_in_area[i])) === max_en_dis) {
			tmp_ecart[j] = cells_in_area[i];
			j += 1;
		}
	}
	//debug("temp_ecart: " + tmp_ecart);

	for (i = 0; i < count(tmp_ecart); i++) {
		tmp_distance[i] = getPathLength(cell_me, tmp_ecart[i]);
	}
	//debug("tmp_distance : " + tmp_distance);
	min_dis = arrayMin(tmp_distance);
	for (i = 0; i < count(tmp_ecart); i++) {
		if (tmp_distance[i] == min_dis) {
			cell_cible = tmp_ecart[i];
			break; //si plusieurs min on prend le 1er
		}
	}
	return (cell_cible);

}

function getlinemove_wp_max_dis(target, wp) { //cherche le point à portée le plus éloigné de l'ennemi'

	var cell_en = getCell(target);
	var cell_me = getCell(me);
	var cells_in_area = getCellsToUseWeaponOnCell(wp, cell_en);
	var tmp_distance = [null];
	var tmp_ecart = [null];

	var min_dis = [null],
		max_dis = [null],
		max_en_dis = 0,
		i = 0,
		j = 0,
		cell_cible = [null];

	//debug("celleinarea :" + cells_in_area);
	for (i = 0; i < count(cells_in_area); i++) {
		tmp_ecart[i] = (getPathLength(cell_en, cells_in_area[i]));
	}
	max_en_dis = arrayMax(tmp_ecart); //le ou les points les plus loins à portée

	//debug("max di:"+max_en_dis);
	j = 0;
	for (i = 0; i < count(cells_in_area); i++) {
		if ((getPathLength(cell_en, cells_in_area[i])) === max_en_dis) {
			max_dis[j] = cells_in_area[i];
			j = j + 1;
		}
	}
	//debug("selc_max_dis_cel"+max_dis);
	for (i = 0; i < count(max_dis); i++) {
		tmp_distance[i] = getPathLength(cell_me, max_dis[i]);
	}

	min_dis = arrayMin(tmp_distance);
	//debug("distance : " + min_dis);
	for (i = 0; i < count(max_dis); i++) {
		if (tmp_distance[i] == min_dis) {
			cell_cible = max_dis[i];
			break; //si plusieurs min on prend le 1er
		}
	}
	//debug('cible:'+cell_cible);
	//debug("max_dis_cib typ:" + getCellContent(cell_cible));
	return (cell_cible);

}


function getlinemove_hide(target, weapon, en_vu) {
	var i;
	var cell_en = getCell(target);
	var cell_me = getCell(me);
	var cells_in_area = getCellsToUseWeaponOnCell(weapon, cell_en, en_vu);
	var tmp_distance = [null];
	var cell_cible;
	var min_dis;

	for (i = 0; i < count(cells_in_area); i++) {
		tmp_distance[i] = getPathLength(cell_me, cells_in_area[i]);
	}
	//debug(tmp_distance);
	min_dis = arrayMin(tmp_distance);
	//debug(min_dis);
	for (i = 0; i < count(cells_in_area); i++) {
		if (tmp_distance[i] == min_dis) {
			//debug("min dis " + min_dis + "cell target " + cells_in_area[i]);
			cell_cible = cells_in_area[i];
			break; //si plusieurs min on prend le 1er
		}
	}
	return (cell_cible);
}

function getlinemove_ch(target, chip) {
	var i;
	var cell_en = getCell(target);
	var cell_me = getCell(me);
	var cells_in_area = getCellsToUseChipOnCell(chip, cell_en);
	var tmp_distance = [null];
	var cell_cible;
	var min_dis;

	for (i = 0; i < count(cells_in_area); i++) {
		tmp_distance[i] = getPathLength(cell_me, cells_in_area[i]);
	}
	//debug(tmp_distance);
	min_dis = arrayMin(tmp_distance);
	//debug(min_dis);
	for (i = 0; i < count(cells_in_area); i++) {
		if (tmp_distance[i] == min_dis) {
			//debug("min dis " + min_dis + "cell target " + cells_in_area[i]);
			cell_cible = cells_in_area[i];
			break; //si plusieurs min on prend le 1er
		}
	}
	return (cell_cible);
}

function getlinemove(target, weapon) {
	var i;
	var cell_en = getCell(target);
	var cell_me = getCell(me);
	var cells_in_area = getCellsToUseWeaponOnCell(weapon, cell_en);
	var tmp_distance = [null];
	var cell_cible;
	var min_dis;

	for (i = 0; i < count(cells_in_area); i++) {
		tmp_distance[i] = getPathLength(cell_me, cells_in_area[i]);
	}
	//debug(tmp_distance);
	min_dis = arrayMin(tmp_distance);
	//debug(min_dis);
	for (i = 0; i < count(cells_in_area); i++) {
		if (tmp_distance[i] == min_dis) {
			//debug("min dis " + min_dis + "cell target " + cells_in_area[i]);
			cell_cible = cells_in_area[i];
			break; //si plusieurs min on prend le 1er
		}
	}
	return (cell_cible);
}

function use_helmet() {
	//if (canUseChip(CHIP_PROTEIN, me) and getTP() >= getChipCost(CHIP_PROTEIN) and getCooldown(CHIP_PROTEIN) === 0) {
	//useChip(CHIP_PROTEIN, me);
	//}
	//[ornicar] (IA : laser&mag, line : 410) Fonction inconnue : summon(number, number, null)

	if ((put_bulb() !== -1) and getCooldown(CHIP_PUNY_BULB) === 0) {
		summon(CHIP_PUNY_BULB, put_bulb(), bulbAI2);
	}

	if (canUseChip(CHIP_WALL, me) and getTP() >= getChipCost(CHIP_WALL) and getCooldown(CHIP_WALL) === 0) {
		useChip(CHIP_WALL, me);
	}
	if (canUseChip(CHIP_SHIELD, me) and getTP() >= getChipCost(CHIP_SHIELD) and getCooldown(CHIP_SHIELD) === 0) {
		useChip(CHIP_SHIELD, me);
	}
	if (canUseChip(CHIP_STRETCHING, me) and getTP() >= getChipCost(CHIP_STRETCHING) and getCooldown(CHIP_STRETCHING) === 0) {
		useChip(CHIP_STRETCHING, me);
	}
	if (canUseChip(CHIP_HELMET, me) and getTP() >= getChipCost(CHIP_HELMET) and getCooldown(CHIP_HELMET) === 0) {
		useChip(CHIP_HELMET, me);
	}


}

function heal_me() {
	if (getLife() < getTotalLife() and getTP() >= getChipCost(CHIP_VACCINE) and getCooldown(CHIP_VACCINE) === 0) {
		useChip(CHIP_VACCINE, me);
	}
	if (getLife() < getTotalLife() and getTP() >= getChipCost(CHIP_DRIP) and getCooldown(CHIP_DRIP) === 0) {
		useChip(CHIP_DRIP, me);
	}
	if (getLife() < getTotalLife() and getTP() >= getChipCost(CHIP_CURE) and getCooldown(CHIP_CURE) === 0) {
		useChip(CHIP_CURE, me);
	}
	//if (getTP() >= getChipCost(CHIP_BANDAGE) and getCooldown(CHIP_BANDAGE) === 0) {
	//useChip(CHIP_BANDAGE, me);
	//}

}

function check_life() {
	var alarm1 = false;
	if (getLife() < ((1. / 3.) * getTotalLife())) {
		alarm1 = true;
	}
	return (alarm1);
}

function attack_sword(target) {
	var alarm = false;
	var test = null;
	while ((canUseWeapon(getWeapon(), target)) == true and getTP() >= getWeaponCost(getWeapon())) {
		//debug(GetEstimDam_wp(getWeapon(), enemy));
		test = useWeapon(target);
		if ((test == (USE_SUCCESS or USE_CRITICAL)) and getWeapon() == 108) {
			count_sword += 1;
		}

	}
}

function attack_wp(target) {
	var alarm = false;
	var test = null;
	if (GetEstimDam_wp(getWeapon(), target) > 10) {
		while ((canUseWeapon(getWeapon(), target)) == true and getTP() >= getWeaponCost(getWeapon())) {
			test = useWeapon(target);
			count_sword = 0;
		}
	}
}

function attack_chip(target) {
	var alarm = false;
	var i = 0;
	var tmp = null;
	var dam_list = null;
	var chip_order = [CHIP_STALACTITE, CHIP_ROCKFALL, CHIP_FLAME, CHIP_FLASH, CHIP_ICE, CHIP_PEBBLE, CHIP_SPARK];
	for (i = 0; i < count(chip_order); i++) {
		tmp = chip_order[i];
		if (GetEstimDam_chip(tmp, target) > 10) {
			while ((canUseChip(tmp, target) == true) and(getTP() >= getChipCost(tmp)) and(getCooldown(tmp) === 0)) {
				debug(getChipName(tmp));
				debug("dam:" + GetEstimDam_chip(tmp, target));
				if (getChipName(tmp) === CHIP_ROCKFALL and getDistance(getCell(me), getCell(enemy)) <= 2) {} else {
					useChip(tmp, target);
				}
			}
		}
	}
}

function attack_VENOM(target) {
	var chip_n = CHIP_VENOM;
	while ((canUseChip(chip_n, target) == true) and(getTP() >= getChipCost(chip_n)) and(getCooldown(chip_n) === 0)) {
		debug(getChipName(chip_n));
		useChip(chip_n, target);
		ven_number += 1;
	}
}



function attack_STALAC(target) {
	var alarm = false;
	var i = 0;
	var tmp = null;
	var chip_order = [CHIP_STALACTITE];
	for (i = 0; i < count(chip_order); i++) {
		tmp = chip_order[i];
		if (GetEstimDam_chip(tmp, target) > 10 and getType(enemy) === ENTITY_LEEK) {
			while ((canUseChip(tmp, target) == true) and(getTP() >= getChipCost(tmp)) and(getCooldown(tmp) === 0)) {
				debug(getChipName(tmp));
				useChip(tmp, target);
			}
		}
	}

}

function i_can_reach_cell(cel_arrive) { // i can shoot
	//var cel_en = getCell(en);
	var cel_me = getCell();
	var wp_can_shoot = false;
	var dist = getPathLength(cel_arrive, cel_me);
	if (dist <= getMP()) {
		wp_can_shoot = true;
	}
	return (wp_can_shoot);
}


function enemy_can_shoot_me(enemy_id) { // i will shoot enemy
	var cel_en = getCell(enemy_id);
	var cel_me = getCell();
	var wp_can_shoot = false;
	var wp = getWeapon(enemy_id);
	var dist = getPathLength(cel_en, cel_me); //baisse qd on approche de enenemy
	//debug("dist"+dist+"weapon range :"+getWeaponMaxRange(wp));
	if (dist <= (getWeaponMaxRange(wp))) {
		wp_can_shoot = true;
	}
	return (wp_can_shoot);
}

function can_shoot_enemy(wp) { // i will shoot enemy
	var cel_en = getCell(enemy);
	var cel_me = getCell();
	var wp_can_shoot = false;
	var dist = getPathLength(cel_en, cel_me); //baisse qd on approche de enenemy
	//debug("dist"+dist+"weapon range :"+getWeaponMaxRange(wp));
	if (dist <= (getWeaponMaxRange(wp) + getTotalMP() + getTotalMP(enemy))) {
		wp_can_shoot = true;
	}
	return (wp_can_shoot);
}


function test_chip_shoot(chip_test, target) {
	var cell_en = getCell(target);
	var cell_me = getCell();
	var chip_can_shoot = false;
	var dist = getCellDistance(cell_en, cell_me);
	if (dist <= (getChipMaxRange(chip_test) + getMP(target))) {
		chip_can_shoot = true;
	}
	return (chip_can_shoot);
}

function equip_for(target, first, second) {
	if (canUseWeapon(first, target) === true and getWeapon() === second and getTP() > (getWeaponCost(first) + 1)) {
		setWeapon(first);
	} else {
		if (canUseWeapon(second, target) === true and canUseWeapon(first, target) === false and getWeapon() === first and getTP() > (getWeaponCost(second))) {
			setWeapon(second);

		}
	}
}

// or use chip
//_______________________MAIN____________________
var table = [];
//while(getMP()!=0){
var alarm = false;
// We get the nearest enemy
//enemy = detect_enemy();
//var en_vu = check_cell_in_sight();
var wp1 = WEAPON_FLAME_THROWER;
var wp2 = WEAPON_DESTROYER;
//var cell_en = getCell(enemy);
//var cell_me = getCell(me);
//var cell_wp1 = getlinemove(enemy, wp1);
//var cell_wp2 = getlinemove(enemy, wp2);
var cell_target, val = getMP(),
	mpUsed = 1,
	mped = 1,
	test1 = false,
	test2 = false;
enemy = detect_enemy();
start();
alarm = check_life();

attack_STALAC(enemy);
if (alarm === true) {

	if (getLife(enemy) > 2 * GetEstimDam_wp(wp1, enemy) and !enemy_can_shoot_me(enemy)) {
		debug("aaaaaaaaaaargh");
		while (mpUsed > 0 and getMP() > 0 and(lineOfSight(getCell(enemy), getCell(me)))) {
			debug("hop !");
			mpUsed = moveAwayFrom(enemy, getTP() - 1);
			mpUsed = moveAwayFromLine(cell_target, getCell(enemy), 1);
			if (mpUsed === 0) {
				mpUsed = moveAwayFrom(enemy, 1);
			}

		}
		heal_me();
		use_helmet();
	}
}

//avancer que si protections actives et plus de poisons actifs

if (getWeapon() !== null) {
	var cell_venom_max = getlinemove_chip_max_dis(enemy, CHIP_VENOM);
	//var cell_venom = getlinemove_ch(enemy, CHIP_VENOM);
	var cell_stalac = getlinemove_ch(enemy, CHIP_STALACTITE);
	//var cell_target_max = getlinemove_wp_max_dis(enemy, wp2);
	var destro = getlinemove(enemy, wp2);
	cell_target = getlinemove(enemy, WEAPON_FLAME_THROWER);
	debug(cell_target);
	//gérer des portées

	while (mped > 0 and getMP() > 0 and getCell() !== (cell_target or destro or cell_venom_max) and getTP() > 0) {

		if (i_can_reach_cell(cell_venom_max) and getChipCooldown(CHIP_VENOM) === 0 and getTP() > getChipCost(CHIP_VENOM)) {
				mped = moveTowardCell(cell_venom_max, getMP()-1);
				debug("attackV");
				attack_VENOM(enemy);
		} 
		else {
			if (i_can_reach_cell(cell_target) and getTP() > getWeaponCost(getWeapon())) {
			mped = moveTowardCell(cell_target, getMP());
			debug("attackL");
			attack_STALAC(enemy);
			equip_for(enemy, wp1, wp2);
			attack_wp(enemy);
			} else {
				debug("A1");
				cell_target = getlinemove(enemy, getWeapon());
				mped = moveTowardCell(cell_venom_max, 1);
				attack_VENOM(enemy);
				attack_STALAC(enemy);
				equip_for(enemy, wp1, wp2);
				attack_wp(enemy);
			}
		}
	}
} else {
	mped = moveToward(enemy);
}
attack_STALAC(enemy);
equip_for(enemy, wp1, wp2);
attack_wp(enemy);
attack_chip(enemy);
enemy = getNearestEnemy(); //si bulbe restant non vus
attack_STALAC(enemy);
equip_for(enemy, wp1, wp2);
attack_wp(enemy);
attack_chip(enemy);
attack_VENOM(enemy);

//attack_VENOM(enemy);
//debug("you will shoot ?" + test_wp_shoot(enemy) );

while (mpUsed > 0 and getMP() > 0 and (lineOfSight(getCell(enemy), getCell(me)))) {
	debug("hop !");
	mpUsed = moveAwayFromLine(cell_target, getCell(enemy), 1);
	if (mpUsed === 0) {
		mpUsed = moveAwayFrom(enemy);
	}
}
if (getCooldown(CHIP_WALL) === 0 and getCooldown(CHIP_SHIELD) === 0) {
	//	if (enemy_can_shoot_me(enemy)) {

	if (can_shoot_enemy(getWeapon()) and!(enemy_can_shoot_me(enemy))) {
		debug("protego !");
		use_helmet();
		heal_me();
	}
}

//-------------------use bandage--------------
heal_me();
//moveToward(enemy);
//attack_wp(enemy);
//use_helmet();
